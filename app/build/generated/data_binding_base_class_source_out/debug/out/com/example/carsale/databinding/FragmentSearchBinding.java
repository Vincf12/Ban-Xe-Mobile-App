// Generated by view binder compiler. Do not edit!
package com.example.carsale.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.carsale.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSearchBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout bottomSheetFilter;

  @NonNull
  public final TextView btnApplyFilter;

  @NonNull
  public final TextView btnClearAllFilters;

  @NonNull
  public final LinearLayout btnFilter;

  @NonNull
  public final TextView btnResetFilter;

  @NonNull
  public final LinearLayout btnSort;

  @NonNull
  public final TextView chipAll;

  @NonNull
  public final TextView chipAutomatic;

  @NonNull
  public final TextView chipHonda;

  @NonNull
  public final TextView chipHyundai;

  @NonNull
  public final TextView chipPriceLow;

  @NonNull
  public final TextView chipToyota;

  @NonNull
  public final EditText etPriceMax;

  @NonNull
  public final EditText etPriceMin;

  @NonNull
  public final EditText etSearch;

  @NonNull
  public final View filterBackdrop;

  @NonNull
  public final ImageView ivClearSearch;

  @NonNull
  public final LinearLayout llBrandSelector;

  @NonNull
  public final LinearLayout llEmptyState;

  @NonNull
  public final LinearLayout llHeader;

  @NonNull
  public final LinearLayout llLoading;

  @NonNull
  public final LinearLayout llRecentSearches;

  @NonNull
  public final LinearLayout llResultsHeader;

  @NonNull
  public final LinearLayout llYearSelector;

  @NonNull
  public final RecyclerView rvSearchResults;

  @NonNull
  public final TextView tvFilterCount;

  @NonNull
  public final TextView tvResultsCount;

  @NonNull
  public final TextView tvSelectedBrand;

  @NonNull
  public final TextView tvSelectedYear;

  private FragmentSearchBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout bottomSheetFilter, @NonNull TextView btnApplyFilter,
      @NonNull TextView btnClearAllFilters, @NonNull LinearLayout btnFilter,
      @NonNull TextView btnResetFilter, @NonNull LinearLayout btnSort, @NonNull TextView chipAll,
      @NonNull TextView chipAutomatic, @NonNull TextView chipHonda, @NonNull TextView chipHyundai,
      @NonNull TextView chipPriceLow, @NonNull TextView chipToyota, @NonNull EditText etPriceMax,
      @NonNull EditText etPriceMin, @NonNull EditText etSearch, @NonNull View filterBackdrop,
      @NonNull ImageView ivClearSearch, @NonNull LinearLayout llBrandSelector,
      @NonNull LinearLayout llEmptyState, @NonNull LinearLayout llHeader,
      @NonNull LinearLayout llLoading, @NonNull LinearLayout llRecentSearches,
      @NonNull LinearLayout llResultsHeader, @NonNull LinearLayout llYearSelector,
      @NonNull RecyclerView rvSearchResults, @NonNull TextView tvFilterCount,
      @NonNull TextView tvResultsCount, @NonNull TextView tvSelectedBrand,
      @NonNull TextView tvSelectedYear) {
    this.rootView = rootView;
    this.bottomSheetFilter = bottomSheetFilter;
    this.btnApplyFilter = btnApplyFilter;
    this.btnClearAllFilters = btnClearAllFilters;
    this.btnFilter = btnFilter;
    this.btnResetFilter = btnResetFilter;
    this.btnSort = btnSort;
    this.chipAll = chipAll;
    this.chipAutomatic = chipAutomatic;
    this.chipHonda = chipHonda;
    this.chipHyundai = chipHyundai;
    this.chipPriceLow = chipPriceLow;
    this.chipToyota = chipToyota;
    this.etPriceMax = etPriceMax;
    this.etPriceMin = etPriceMin;
    this.etSearch = etSearch;
    this.filterBackdrop = filterBackdrop;
    this.ivClearSearch = ivClearSearch;
    this.llBrandSelector = llBrandSelector;
    this.llEmptyState = llEmptyState;
    this.llHeader = llHeader;
    this.llLoading = llLoading;
    this.llRecentSearches = llRecentSearches;
    this.llResultsHeader = llResultsHeader;
    this.llYearSelector = llYearSelector;
    this.rvSearchResults = rvSearchResults;
    this.tvFilterCount = tvFilterCount;
    this.tvResultsCount = tvResultsCount;
    this.tvSelectedBrand = tvSelectedBrand;
    this.tvSelectedYear = tvSelectedYear;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSearchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSearchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_search, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSearchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottom_sheet_filter;
      LinearLayout bottomSheetFilter = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheetFilter == null) {
        break missingId;
      }

      id = R.id.btn_apply_filter;
      TextView btnApplyFilter = ViewBindings.findChildViewById(rootView, id);
      if (btnApplyFilter == null) {
        break missingId;
      }

      id = R.id.btn_clear_all_filters;
      TextView btnClearAllFilters = ViewBindings.findChildViewById(rootView, id);
      if (btnClearAllFilters == null) {
        break missingId;
      }

      id = R.id.btn_filter;
      LinearLayout btnFilter = ViewBindings.findChildViewById(rootView, id);
      if (btnFilter == null) {
        break missingId;
      }

      id = R.id.btn_reset_filter;
      TextView btnResetFilter = ViewBindings.findChildViewById(rootView, id);
      if (btnResetFilter == null) {
        break missingId;
      }

      id = R.id.btn_sort;
      LinearLayout btnSort = ViewBindings.findChildViewById(rootView, id);
      if (btnSort == null) {
        break missingId;
      }

      id = R.id.chip_all;
      TextView chipAll = ViewBindings.findChildViewById(rootView, id);
      if (chipAll == null) {
        break missingId;
      }

      id = R.id.chip_automatic;
      TextView chipAutomatic = ViewBindings.findChildViewById(rootView, id);
      if (chipAutomatic == null) {
        break missingId;
      }

      id = R.id.chip_honda;
      TextView chipHonda = ViewBindings.findChildViewById(rootView, id);
      if (chipHonda == null) {
        break missingId;
      }

      id = R.id.chip_hyundai;
      TextView chipHyundai = ViewBindings.findChildViewById(rootView, id);
      if (chipHyundai == null) {
        break missingId;
      }

      id = R.id.chip_price_low;
      TextView chipPriceLow = ViewBindings.findChildViewById(rootView, id);
      if (chipPriceLow == null) {
        break missingId;
      }

      id = R.id.chip_toyota;
      TextView chipToyota = ViewBindings.findChildViewById(rootView, id);
      if (chipToyota == null) {
        break missingId;
      }

      id = R.id.et_price_max;
      EditText etPriceMax = ViewBindings.findChildViewById(rootView, id);
      if (etPriceMax == null) {
        break missingId;
      }

      id = R.id.et_price_min;
      EditText etPriceMin = ViewBindings.findChildViewById(rootView, id);
      if (etPriceMin == null) {
        break missingId;
      }

      id = R.id.et_search;
      EditText etSearch = ViewBindings.findChildViewById(rootView, id);
      if (etSearch == null) {
        break missingId;
      }

      id = R.id.filter_backdrop;
      View filterBackdrop = ViewBindings.findChildViewById(rootView, id);
      if (filterBackdrop == null) {
        break missingId;
      }

      id = R.id.iv_clear_search;
      ImageView ivClearSearch = ViewBindings.findChildViewById(rootView, id);
      if (ivClearSearch == null) {
        break missingId;
      }

      id = R.id.ll_brand_selector;
      LinearLayout llBrandSelector = ViewBindings.findChildViewById(rootView, id);
      if (llBrandSelector == null) {
        break missingId;
      }

      id = R.id.ll_empty_state;
      LinearLayout llEmptyState = ViewBindings.findChildViewById(rootView, id);
      if (llEmptyState == null) {
        break missingId;
      }

      id = R.id.ll_header;
      LinearLayout llHeader = ViewBindings.findChildViewById(rootView, id);
      if (llHeader == null) {
        break missingId;
      }

      id = R.id.ll_loading;
      LinearLayout llLoading = ViewBindings.findChildViewById(rootView, id);
      if (llLoading == null) {
        break missingId;
      }

      id = R.id.ll_recent_searches;
      LinearLayout llRecentSearches = ViewBindings.findChildViewById(rootView, id);
      if (llRecentSearches == null) {
        break missingId;
      }

      id = R.id.ll_results_header;
      LinearLayout llResultsHeader = ViewBindings.findChildViewById(rootView, id);
      if (llResultsHeader == null) {
        break missingId;
      }

      id = R.id.ll_year_selector;
      LinearLayout llYearSelector = ViewBindings.findChildViewById(rootView, id);
      if (llYearSelector == null) {
        break missingId;
      }

      id = R.id.rv_search_results;
      RecyclerView rvSearchResults = ViewBindings.findChildViewById(rootView, id);
      if (rvSearchResults == null) {
        break missingId;
      }

      id = R.id.tv_filter_count;
      TextView tvFilterCount = ViewBindings.findChildViewById(rootView, id);
      if (tvFilterCount == null) {
        break missingId;
      }

      id = R.id.tv_results_count;
      TextView tvResultsCount = ViewBindings.findChildViewById(rootView, id);
      if (tvResultsCount == null) {
        break missingId;
      }

      id = R.id.tv_selected_brand;
      TextView tvSelectedBrand = ViewBindings.findChildViewById(rootView, id);
      if (tvSelectedBrand == null) {
        break missingId;
      }

      id = R.id.tv_selected_year;
      TextView tvSelectedYear = ViewBindings.findChildViewById(rootView, id);
      if (tvSelectedYear == null) {
        break missingId;
      }

      return new FragmentSearchBinding((LinearLayout) rootView, bottomSheetFilter, btnApplyFilter,
          btnClearAllFilters, btnFilter, btnResetFilter, btnSort, chipAll, chipAutomatic, chipHonda,
          chipHyundai, chipPriceLow, chipToyota, etPriceMax, etPriceMin, etSearch, filterBackdrop,
          ivClearSearch, llBrandSelector, llEmptyState, llHeader, llLoading, llRecentSearches,
          llResultsHeader, llYearSelector, rvSearchResults, tvFilterCount, tvResultsCount,
          tvSelectedBrand, tvSelectedYear);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
